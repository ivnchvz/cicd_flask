---
- name: Configure EC2 instance
  hosts: all
  become: yes
  tasks:
    - name: Update yum cache and upgrade packages
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        owner: root
        group: root

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create app directory
      file:
        path: /app
        state: directory
        mode: '0755'

    - name: Copy frontend directory
      copy:
        src: "{{ playbook_dir }}/../frontend/"
        dest: /app/frontend/
        mode: preserve

    - name: Copy backend directory
      copy:
        src: "{{ playbook_dir }}/../backend/"
        dest: /app/backend/
        mode: preserve

    - name: Copy docker-compose.yml
      copy:
        src: "{{ playbook_dir }}/../docker-compose.yml"
        dest: /app/docker-compose.yml
        mode: '0644'

    - name: Start docker compose in background
      shell: /usr/local/bin/docker-compose up -d &
      args:
        chdir: /app
      async: 600  # Allow 10 minutes for the command to run in the background
      poll: 0     # Donâ€™t wait for completion; weâ€™ll poll manually
      register: docker_compose_start

    - name: Check docker compose container status
      shell: /usr/local/bin/docker-compose ps -q | xargs -r docker inspect --format '{{.State.Status}}' || echo "no containers"
      args:
        chdir: /app
      register: container_status
      until: >
        container_status.stdout is search("running") and
        not container_status.stdout is search("created|exited|no containers")
      retries: 20  # Check every 30s for up to 10 minutes (20 * 30s = 600s)
      delay: 30    # Wait 30 seconds between checks
      failed_when: container_status.rc != 0 or container_status.stdout is search("exited|no containers")

    - name: Debug container status on failure
      debug:
        var: container_status
      when: container_status.failed