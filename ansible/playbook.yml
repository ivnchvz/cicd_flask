---
- name: Configure EC2 instance
  hosts: all
  become: yes
  tasks:
    - name: Update yum cache and upgrade packages
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        owner: root
        group: root

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create app directory
      file:
        path: /app
        state: directory
        mode: '0755'

    - name: Copy frontend directory
      copy:
        src: "{{ playbook_dir }}/../frontend/"
        dest: /app/frontend/
        mode: preserve

    - name: Copy backend directory
      copy:
        src: "{{ playbook_dir }}/../backend/"
        dest: /app/backend/
        mode: preserve

    - name: Copy docker-compose.yml
      copy:
        src: "{{ playbook_dir }}/../docker-compose.yml"
        dest: /app/docker-compose.yml
        mode: '0644'

    - name: Display docker-compose.yml content for debugging
      command: cat /app/docker-compose.yml
      register: compose_file_content
      changed_when: false

    - name: Print docker-compose.yml content
      debug:
        var: compose_file_content.stdout_lines

    # Modified Docker Compose section with verbose logging
    - name: Start docker compose in verbose mode
      shell: cd /app && /usr/local/bin/docker-compose --verbose up -d
      register: docker_compose_start

    - name: Debug docker-compose up output
      debug:
        var: docker_compose_start.stdout_lines

    - name: Stream real-time Docker logs
      shell: cd /app && /usr/local/bin/docker-compose logs -f
      register: docker_logs
      async: 180  # Allow 3 minutes for log streaming
      poll: 0
      changed_when: false

    - name: Pause for initial log capture
      pause:
        seconds: 25

    - name: List all Docker containers
      shell: docker ps -a
      register: docker_ps
      changed_when: false

    - name: Show all Docker containers
      debug:
        var: docker_ps.stdout_lines

    - name: Check docker compose container status
      shell: cd /app && /usr/local/bin/docker-compose ps -q | xargs -r docker inspect --format {% raw %}'{{.State.Status}}'{% endraw %} || echo "no containers"
      register: container_status
      until: >
        container_status.stdout is search("running") and
        not container_status.stdout is search("created|exited|no containers")
      retries: 20
      delay: 30
      failed_when: container_status.rc != 0 or container_status.stdout is search("exited|no containers")

    - name: Debug container status on failure
      debug:
        var: container_status
      when: container_status.failed

    - name: Show docker-compose logs on failure
      shell: cd /app && /usr/local/bin/docker-compose logs
      register: docker_logs
      when: container_status.failed

    - name: Print docker-compose logs
      debug:
        var: docker_logs.stdout_lines
      when: container_status.failed

    - name: Check disk space
      shell: df -h
      register: disk_space
      changed_when: false
      when: container_status.failed

    - name: Show disk space
      debug:
        var: disk_space.stdout_lines
      when: container_status.failed

    - name: Check system memory
      shell: free -m
      register: system_memory
      changed_when: false
      when: container_status.failed

    - name: Show system memory
      debug:
        var: system_memory.stdout_lines
      when: container_status.failed