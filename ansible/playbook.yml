---
- name: Configure EC2 instance
  hosts: all
  become: yes
  vars:
    COMPOSE_DIR: /app
    COMPOSE_TIMEOUT: 1800  # 30 minutes in seconds

  tasks:
    - name: Update yum cache and upgrade packages
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        owner: root
        group: root

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create app directory
      file:
        path: "{{ COMPOSE_DIR }}"
        state: directory
        mode: '0755'

    - name: Copy frontend directory
      copy:
        src: "{{ playbook_dir }}/../frontend/"
        dest: "{{ COMPOSE_DIR }}/frontend/"
        mode: preserve

    - name: Copy backend directory
      copy:
        src: "{{ playbook_dir }}/../backend/"
        dest: "{{ COMPOSE_DIR }}/backend/"
        mode: preserve

    - name: Copy docker-compose.yml
      copy:
        src: "{{ playbook_dir }}/../docker-compose.yml"
        dest: "{{ COMPOSE_DIR }}/docker-compose.yml"
        mode: '0644'

    - name: Validate docker-compose.yml syntax
      shell: "cd {{ COMPOSE_DIR }} && /usr/local/bin/docker-compose config -q"
      register: compose_validation
      changed_when: false

    - name: Debug compose validation
      debug:
        var: compose_validation.stdout_lines
      when: compose_validation.rc != 0

    - name: Start Docker Compose (foreground with logs)
      shell: 
        cmd: "cd {{ COMPOSE_DIR }} && /usr/local/bin/docker-compose --verbose up 2>&1 | tee -a /var/log/docker-compose.log"
      register: docker_compose_output
      async: "{{ COMPOSE_TIMEOUT }}"
      poll: 5
      args:
        executable: /bin/bash

    - name: Stream logs to Jenkins console
      debug:
        var: docker_compose_output.stdout_lines
      when: docker_compose_output.stdout_lines is defined

    - name: Check container status after deployment
      shell: "cd {{ COMPOSE_DIR }} && /usr/local/bin/docker-compose ps -q | xargs -r docker inspect -f '{{ '{{.State.Status}}' }}'"
      register: container_status
      until: container_status.stdout is search("running")
      retries: 12  # 1 minute (5s x 12)
      delay: 5
      changed_when: false

    - name: Show Docker Compose logs if containers aren't running
      shell: "cd {{ COMPOSE_DIR }} && /usr/local/bin/docker-compose logs"
      register: failure_logs
      when: container_status.failed
      changed_when: false

    - name: Debug container status
      debug:
        var: container_status.stdout
      when: container_status.failed

    - name: Debug Docker system
      shell: |
        echo "=== Docker System Info ==="
        docker info
        echo "=== Running Containers ==="
        docker ps -a
        echo "=== Disk Space ==="
        df -h
        echo "=== Memory Usage ==="
        free -m
      register: system_info
      when: container_status.failed
      changed_when: false

    - name: Print system info on failure
      debug:
        var: system_info.stdout_lines
      when: container_status.failed